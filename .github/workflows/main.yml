name: 🚀 Build Android APK

on:
  workflow_dispatch:  # ✅ Only manual trigger enabled

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: 🤖 Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: ⚙️ Configure Gradle Properties
        run: |
          mkdir -p ~/.gradle
          echo "org.gradle.jvmargs=-Xmx4g" >> ~/.gradle/gradle.properties
          echo "org.gradle.parallel=true" >> ~/.gradle/gradle.properties
          echo "android.useAndroidX=true" >> ~/.gradle/gradle.properties
          echo "android.enableJetifier=true" >> ~/.gradle/gradle.properties

      - name: 🔐 Generate Debug Keystore
        run: |
          mkdir -p .android
          keytool -genkeypair \
            -keystore .android/debug.keystore \
            -storepass android \
            -keypass android \
            -alias androiddebugkey \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=Android Debug, O=Android, C=US"

      - name: 🏗️ Build APK (Error-Focused Logging)
        id: build_apk
        continue-on-error: true
        run: |
          chmod +x ./gradlew
          echo "🔨 Starting build process..."
          if ./gradlew clean assembleRelease --quiet --stacktrace 2>&1 | \
             tee build_output.txt | \
             grep -v -E '^(Download|> Task|BUILD SUCCESSFUL|> Configure|Starting a Gradle Daemon)' | \
             grep -E -i '(error|exception|failed|unresolved|cannot find|duplicate|missing|fatal)'; then
            echo "❌ Build completed with errors"
          else
            echo "✅ Build completed successfully"
          fi

      - name: 📄 Extract and Display Errors Only
        if: always()
        run: |
          echo "🔍 Extracting errors from build log..."
          grep -E -i -A 2 -B 1 '(error:|exception|failed|unresolved|cannot find|duplicate class|missing|fatal)' \
            build_output.txt > errors_only.txt || echo "No errors found in build log"
          
          if [ -s errors_only.txt ]; then
            echo "🚨 BUILD ERRORS FOUND:"
            echo "===================="
            cat errors_only.txt
            echo "===================="
          else
            echo "✅ No build errors detected"
          fi

      - name: 🚨 Annotate Critical Errors
        if: failure()
        run: |
          if [ -s errors_only.txt ]; then
            head -n 20 errors_only.txt | while read -r line; do
              echo "::error::$line"
            done
          fi

      - name: 🧾 Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Build-Logs-${{ github.run_number }}
          path: |
            build_output.txt
            errors_only.txt
            error_summary.txt

      - name: 🧮 List Generated APKs
        run: find . -name "*.apk" > all_apks.txt && cat all_apks.txt

      - name: 🔏 Sign APK (if exists)
        run: |
          APK_PATH=$(cat all_apks.txt | grep 'app-release-unsigned.apk' || true)
          if [ -n "$APK_PATH" ]; then
            ZIPALIGN=$(find $ANDROID_HOME/build-tools -name zipalign | sort -r | head -n 1)
            APKSIGNER=$(find $ANDROID_HOME/build-tools -name apksigner | sort -r | head -n 1)

            $ZIPALIGN -v -p 4 "$APK_PATH" aligned.apk
            $APKSIGNER sign \
              --ks .android/debug.keystore \
              --ks-pass pass:android \
              --key-pass pass:android \
              --out final-release-signed.apk \
              aligned.apk

            echo "SIGNED_APK=final-release-signed.apk" >> $GITHUB_ENV
          else
            echo "❌ APK not found" && exit 1
          fi

      - name: 📦 Upload Final APK
        if: env.SIGNED_APK
        uses: actions/upload-artifact@v4
        with:
          name: Apk-Build-${{ github.run_number }}
          path: ${{ env.SIGNED_APK }}
          retention-days: 30

      - name: 📢 Notify on Build Failure
        if: failure()
        run: echo "❌ Build Failed. Check error_summary.txt in logs."
