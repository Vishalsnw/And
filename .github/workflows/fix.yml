name: Android CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '**.gitignore'

env:
  ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🗄 Cache Android SDK
        uses: actions/cache@v4
        id: android-cache
        with:
          path: |
            ${{ env.ANDROID_SDK_ROOT }}
            ~/.android/cache
          key: ${{ runner.os }}-android-${{ hashFiles('**/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-android-

      - name: ⚙️ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: 📱 Setup Android SDK
        if: steps.android-cache.outputs.cache-hit != 'true'
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 'latest'
          build-tools-version: '34.0.0'
          platform-version: '34'
          disable-emulator: true
          disable-ndk: true
          disable-system-images: true

      - name: 📜 Accept Licenses
        run: |
          yes | sdkmanager --licenses || true
          sdkmanager --update

      - name: 🔄 Update Gradle Wrapper
        run: ./gradlew wrapper --gradle-version 8.0 --distribution-type bin

      - name: 🔍 Check for Wildcard Imports
        id: wildcard-check
        run: |
          if grep -rE '^import .*\.\*$' app/src/main/java; then
            echo "wildcards_found=true" >> $GITHUB_OUTPUT
          else
            echo "wildcards_found=false" >> $GITHUB_OUTPUT
          fi

      - name: 🛠 Fix Wildcard Imports
        if: steps.wildcard-check.outputs.wildcards_found == 'true'
        run: |
          find app/src/main/java -name "*.kt" -exec sed -i '/^import .*\.\*$/d' {} +
          ./gradlew spotlessApply --no-daemon

      - name: ✨ Run Spotless
        run: ./gradlew spotlessApply --no-daemon --stacktrace

      - name: 💾 Commit Formatting
        if: always()
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git diff --cached --quiet || (git commit -m "🚀 CI: Auto-format code" && git push)
        continue-on-error: true

      - name: 🧹 Clean Project
        run: ./gradlew clean --no-daemon

      - name: 🔨 Build APK
        run: ./gradlew assembleDebug --no-daemon --stacktrace

      - name: 🔍 Analyze Build
        run: |
          {
            echo "### Build Report"
            echo "Start: $(date)"
            ./gradlew build --no-daemon > build.log 2>&1 || true
            echo "Finish: $(date)"
            echo ""
            echo "### Errors"
            grep -E 'error|exception|failed|Caused by|not found|unresolved|compilation|kapt|spotless' build.log || echo "✅ No critical errors found"
          } > summary.log

      - name: 📦 Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.run_number }}
          path: |
            app/build/outputs/apk/debug/*.apk
            build.log
            summary.log
          retention-days: 3

      - name: 📊 Job Summary
        if: always()
        run: |
          echo "### 🛠️ Build Report" >> $GITHUB_STEP_SUMMARY
          echo "**Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 📝 Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat summary.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
